---
// Define properties for each head card
type Props = {
  headCard: {
    title: string;
    subtitle1: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    subtitle2: string;
    phone: string;
    email: string;
    subtitle3: string;
    phone2: string;
    // phone3: string;
  }[];
};
// Extract the headCard data from props
const { headCard } = Astro.props;
---

<!-- // Render the head cards -->
<!-- Render head cards based on provided data -->
<div class=" bg-gradient-to-tl from-cyan-600 to-sky-800 text-primary-content text-opacity-90 border-slate-100 border-opacity-20 box-decoration-clone grid grid-cols-1 grid-rows-1 w-dvw h-48 ">
  {headCard.map((card) => (
    <!-- Iterate over each card in headCard array and create a div for each card -->
    <div class=" border-x-[0px] border-y-[0px] border-transparent rounded-md pt-0 pb-0 mb-0 ">
      <section class=" h-2/5 flex items-center justify-center text-center text-wrap font-normal uppercase text-3xl line-clamp-2 divide-y-[1px] tracking-wide">
        <h2 class="text-center text-nowrap font-light uppercase text-3xl line-clamp-2 divide-y-[1px] pt-3 px-2 py-1 tracking-wide ">
        {card.title} <!-- Display the card title -->
      </h2>
      </section>
      <!-- Divider line -->
      <div class="w-lvw p-0 m-0 border-b-2 border-slate-100 border-opacity-20 "></div>
      <!-- Sections for address, contact, and help desk information -->
      <!-- Address section -->
          {/* <section class="address-section pb-1">
          <!--<p>{card.subtitle1}</p> -->
          <div class="w-svw text-center tracking-wide align-middle pt-2 py-2 border-b-2 border-slate-100 border-opacity-20">
            <p class="text-base/5 ">{card.address} {card.city} {card.state} {card.zip}</p>
          </div>
        </section> */}
        <!-- Contact section -->
        <section class="contact-section h-2/5 ">
          <div class="grid grid-cols-2 divide-x-2 divide-slate-100 divide-opacity-20 gap-y-10  py-3 ">
        <!-- Column 1 -->
        <div class=" text-center align-middle pe-2 ">
          <p class="font-[500] border-b-2 uppercase tracking-wider border-slate-100 border-opacity-20 pb-0.5">{card.subtitle1}</p>
          <p class="pt-2 pb-0 text-base ">{card.phone}</p>
        </div>
        <!-- Column 2 -->
        <div class=" text-center align-middle ps-2 ">
          <p class="font-[500] border-b-2 border-slate-100 border-opacity-20 uppercase tracking-wider pb-0.5 ">{card.subtitle2}</p>
          <p class="pt-2  pb-0 ps-0 text-base " >{card.phone2}</p>
        </div>
      </div>
        </section>
        <!-- Help desk section -->
        {/* <section class=" text-nowrap border-t-2 border-slate-100 border-opacity-20 ">
          <div class="grid grid-cols-1 gap-1 divide-x-2 border-slate-100 border-opacity-20 ">
            <div class="text-base font-[500] text-center align-middle py-3 ps-2 pe-2 -mt-1 mb-1 uppercase tracking-wide">{card.subtitle3}<span class="font-normal lowercase text-[15px] truncate "> {card.email}</span></div>
      </div>
        </section> */}
        <section class="address-section flex items-center justify-center text-center text-nowrap h-1/5 border-t-2 border-slate-100 border-opacity-20 ">
          <!--<p>{card.subtitle1}</p> -->
          <div class="grid grid-cols-1 gap-1 divide-x-2 border-slate-100 border-opacity-20">
            <p class=" text-base font-normal capitalize truncate ">{card.address} {card.city}, {card.state} {card.zip}</p>
          </div>
        </section>
    </div>
  ))}
</div>


<style>
  /* Styles for dividers */
  .divider {
    margin-top: 0;
    margin-bottom: 3%;
  }
</style>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const titles = document.querySelectorAll('.card-title') as NodeListOf<HTMLElement>; // Explicitly typecast to NodeListOf<HTMLElement>

    const checkAndApplyStyles = () => {
        titles.forEach(title => {
            // Assert type as HTMLElement to access style and offsetHeight
            const titleElement = title as HTMLElement;

            // Temporarily force single-line to measure
            titleElement.style.whiteSpace = 'nowrap';
            const singleLineHeight = titleElement.offsetHeight;

            // Allow wrapping and measure again
            titleElement.style.whiteSpace = 'normal';
            const multiLineHeight = titleElement.offsetHeight;

            // Compare heights to determine if text has wrapped
            if (multiLineHeight > singleLineHeight) {
                titleElement.classList.add('wrapped-style'); // Add a class if it wraps
            } else {
                titleElement.classList.remove('wrapped-style'); // Remove the class if it doesn't wrap
            }
        });
    };

    // Run initially and on window resize
    checkAndApplyStyles();
    window.addEventListener('resize', checkAndApplyStyles);
});


</script>
