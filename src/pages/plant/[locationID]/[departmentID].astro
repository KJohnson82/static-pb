---
import type { GetStaticPaths } from "astro";
import Data from '../../../data/Data.json';
import Main from '../../../layouts/Main.astro';
import CorpHeadCard from '../../../components/CorpHeadCard.astro';
import Footer from '../../../components/Footer.astro';
import SearchBar from '../../../components/SearchBar.astro';
import { Icon } from 'astro-icon/components';


// Access departments directly based on your JSON structure
// const departments = CorpData.loctype.corporate.locations[0].departments;

// const departments = locations.flatMap(location => location.departments);

// export async function getStaticPaths() {
  
// const locations = Data.loctype.plant.locations;
// const departments = locations.flatMap(location => location.departments);
// console.log(`Departments: ${departments}`);
// const paths = locations.map(location => location.departments.map(department => ({
//   params: {
//     locationID: location.id.toString(),
//     departmentID: department.id.toString(),
//   },
// })));
// return paths;
  
// }

export async function getStaticPaths() {
    // Assuming 'Data' has a structure where each location has multiple departments
    const locations = Data.loctype.plant.locations;
    const departments = locations.flatMap(location => location.departments);

    // Flatten the nested structure and create an array of path objects
    const paths = locations.flatMap(location =>
        location.departments.map(department => ({
            params: {
                locationID: location.id.toString(),
                departmentID: department.id.toString(),
            },
            props: {
                employees: department.employees,
            },
        }))
    );

    // Since Astro expects an array of objects, each with a `params` key,
    // this structure is now correctly formed to map each department to its path.
    return paths;
}



const { departmentID, locationID, } = Astro.params;
const { employees } = Astro.props;

// const departmentID = Astro.params.departmentID;
const departments= Data.loctype.plant.locations.flatMap(locations => locations.departments);
const department = departments.find(dept => dept.id.toString() === departmentID.toString());




// const { locationID, departmentID, employeeID } = Astro.params;
// const location = Data.loctype.plant.locations.find(loc => loc.id.toString() === locationID);
// const department = location?.departments.find(dept => dept.id.toString() === departmentID);
// const employee = department?.employees.find(emp => emp.id.toString() === employeeID);


if (!department) {
  return Astro.redirect('/404');
}
---

<Main title={department.deptName}>
  <div class="w-full h-full card card-compact">
    <section class="h-2/6 shadow-sm">
      <!-- {/* Render the corporate header card with relevant information */} -->
      <CorpHeadCard 
        headCard={[
          {
            title: `${department.deptName}`, // Title of the card
            subtitle1: "Corp. Phone",
            address: "555 Generic Road,", // Address line
            city: "Central City", // City
            state: "WS", // State
            zip: "77777", // ZIP code
            subtitle2: "Corp. Email",
            phone: "(888) 555-5555", // Phone number
            email: "info@info.com", // Email address
            subtitle3: "IT Help Desk", // Third subtitle
            phone2: "(866) 555-5555", // Second phone number
          },
        ]}
      />
    </section>
    <div class="divider shadow-sm -mt-2 -mb-2"></div>

    <section
        class="h-5/6 flex-auto pb-5 pt-5 no-scrollbar resize-none overflow-y-scroll overscroll-contain scroll-auto scroll-mx-px bg-inherit" 
      >
      <div class="ps-1 py-0.5 pe-2">
        <SearchBar />
      </div>

      <!-- <h1>{department.deptName}</h1> -->
    <div class="h-full ps-2 py-1 pe-2 border-4 border-transparent overflow-y-auto no-scrollbar">
      <ul class="mt-4 ms-0.5">
        {department.employees.map(employee => (
          <li class="relative rounded-md shadow-md border-2 my-2 py-0 mx-0 transition ease-in duration-150 transform hover:-translate-y-1 hover:scale-100 " >
            <a href={`/plant/${locationID}/${departmentID}/${employee.id}`} class="block px-4 py-4 text-white rounded-lg hover:bg-primary hover:rounded-md hover:border-transparent hover:text-white transition-colors" >
              
              <div class=" justify-around items-center place-items-center text-lg tracking-wider text-white mb-0.5 -px-4 p-0 capitalize truncate align-middle" >
                  <!-- Places a star beside employees who are managers -->
              {employee.isManager === 1 ? <Icon name="star" class="inline-block pe-2 h-6 w-auto"/> : ""} 
              {employee.firstName + " " + employee.lastName + " - " + employee.jobTitle + " "} 
                
                </div>
            </a>
          </li>
        ))}
      </ul>
    </div>  
    

    </section>

    <div class="divider shadow-sm -mt-1 -mb-1"></div>

    <section class="box-border h-1/5 mt-2">
      <!-- {/* Render the footer with navigation links */} -->
      <Footer
        bottomNav={[
          { icon: "home", label: "Home", to: "/" },
          // { icon: "corporate", label: "Corporate", to: "/corporate" },
          { icon: "store", label: "Metal Mart", to: "/metalmart" },
          {
            icon: "service_center",
            label: "Service Center",
            to: "/servicecenter",
          },
          { icon: "plant", label: "Plant", to: "/plant" },
        ]}
      />
    </section>
  </div>
</Main>

<style>
    /* input[type="radio"]:checked + .collapse-title {
      background-color: #1c4e80;
      border-bottom: 2px solid white;
      font-weight: bold;
    } */
    .card {
    margin: 0 auto;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);
  }
  li {
    font-family: 'Rubik', sans-serif;
    font-weight: normal;
    
  }
  </style>

<script>
  function speak() {
    console.log('department file clicked!');
  }
  
</script>